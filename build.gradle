/*
 * Copyright (c) 2018.
 *
 * This file is part of ProcessManager.
 *
 * This file is licenced to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You should have received a copy of the license with the source distribution.
 * Alternatively, you may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */



buildscript {

    ext {
        if (! rootProject.hasProperty('kotlin_version') ) { kotlin_version = '1.3.21' }
        if (! rootProject.hasProperty('codegen_version') ) { codegen_version = '0.5.10' }
        if (! rootProject.hasProperty('jupiterVersion') ) { jupiterVersion = '5.2.0' }
        if (! rootProject.hasProperty('junit5_version') ) { junit5_version = '1.2.0' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.devrieze:gradle-codegen:${codegen_version}"
    }

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url='https://dl.bintray.com/kotlin/kotlin-eap-1.2'
        }
    }
}

plugins {
    id "com.gradle.plugin-publish" version "0.9.7"
    id "com.jfrog.bintray" version "1.8.4"
    id 'maven-publish'
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.devrieze.gradlecodegen'

ext {
//    if (! rootProject.hasProperty('kotlin_version') ) { kotlin_version = '1.1.2-3' }
    if (! rootProject.hasProperty('myJavaVersion')) { myJavaVersion = JavaVersion.VERSION_1_8 }
}

version = '0.7.4-SNAPSHOT'
group = 'net.devrieze'



bintray {
    if (rootProject.hasProperty('bintrayUser')) {
        user = bintrayUser
        key = bintrayApiKey
    }
    publications = ['KotlinSqlPublication']

    pkg {
        repo = 'maven'
        name = 'kotlinsql'
        userOrg = 'pdvrieze'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/pdvrieze/kotlinsql.git'

        version {
            name = project.version
            desc = 'Bugfix issue'
            released = new Date()
            vcsTag = "v$version"
        }
    }
}


description = 'A utility library for working with databases in kotlin'

repositories {
    jcenter()
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        generate {
            def depth = 10
            databaseFunctions{
                output = 'uk/ac/bournemouth/util/kotlin/sql/impl/gen/DatabaseMethods.kt'
                generator = "kotlinsql.builder.GenerateDatabaseBaseKt"
                input = depth
            }
            selects{
                output = 'uk/ac/bournemouth/util/kotlin/sql/impl/gen/selectImpls.kt'
                generator = "kotlinsql.builder.GenerateSelectClasses"
                input = depth
            }
            statements{
                output = 'uk/ac/bournemouth/util/kotlin/sql/impl/gen/statementImpls.kt'
                generator = "kotlinsql.builder.GenerateStatementsKt"
                input = depth
            }
            inserts{
                output = 'uk/ac/bournemouth/util/kotlin/sql/impl/gen/Inserts.kt'
                generator = "kotlinsql.builder.GenerateInsertsKt"
                input = depth
            }
        }
    }
}



task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    from files('LICENSE')
}


publishing {
    publications {
        KotlinSqlPublication(MavenPublication) {
            from components.java
            groupId group
            artifactId 'kotlinsql'

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
//    api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    generatorsCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"
}

idea{
    module {
        downloadSources = true
    }
}

sourceCompatibility = myJavaVersion
targetCompatibility = myJavaVersion
