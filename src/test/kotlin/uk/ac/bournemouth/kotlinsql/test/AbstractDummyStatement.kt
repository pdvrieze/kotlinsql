/*
 * Copyright (c) 2020.
 *
 * This file is part of kotlinsql.
 *
 * This file is licenced to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You should have received a copy of the license with the source distribution.
 * Alternatively, you may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package uk.ac.bournemouth.kotlinsql.test

import java.lang.Exception
import java.sql.Connection
import java.sql.ResultSet
import java.sql.SQLWarning
import java.sql.Statement

abstract class AbstractDummyStatement(
    private val connection: DummyConnection,
    private val resultSetType: Int = ResultSet.TYPE_SCROLL_INSENSITIVE,
    private val resultSetConcurrency: Int = ResultSet.CONCUR_UPDATABLE
                                     ) : Statement {

    @get:JvmName("getIsClosed")
    protected var isClosed = false

    protected abstract fun recordAction(action: DummyConnection.Action)

    open protected fun <R> recordRes(result: R, vararg args: Any?): R {
        val calledFunction = Exception().stackTrace[1].methodName
        val ac = DummyConnection.StringAction("$this.$calledFunction(${args.joinToString()}) -> $result")
        recordAction(ac)
        return result
    }

    open protected fun record(vararg args: Any?) {
        val calledFunction = Exception().stackTrace[1].methodName
        val ac = DummyConnection.StringAction("$this.$calledFunction(${args.joinToString()})")
        recordAction(ac)
    }


    final override fun clearBatch() = record()

    final override fun getResultSetType(): Int = recordRes(resultSetType)

    final override fun isCloseOnCompletion(): Boolean = recordRes(true)

    override fun <T : Any?> unwrap(iface: Class<T>?): T {
        TODO("not implemented")
    }

    override fun getMaxRows(): Int {
        TODO("not implemented")
    }

    final override fun cancel() = record()

    final override fun getConnection(): DummyConnection = connection

    final override fun setMaxFieldSize(max: Int) = record(max)

    final override fun getWarnings(): SQLWarning? = recordRes(null)

    override fun executeQuery(sql: String?): ResultSet {
        TODO("not implemented")
    }

    override fun close() {
        isClosed = true
        record()
    }

    final override fun isClosed(): Boolean = recordRes(isClosed)

    override fun getMaxFieldSize(): Int {
        TODO("not implemented")
    }

    override fun isWrapperFor(iface: Class<*>?): Boolean = recordRes(false)

    override fun getUpdateCount(): Int {
        TODO("not implemented")
    }

    override fun setMaxRows(max: Int) {
        TODO("not implemented")
    }

    override fun setFetchDirection(direction: Int) {
        TODO("not implemented")
    }

    override fun getFetchSize(): Int {
        TODO("not implemented")
    }

    override fun setEscapeProcessing(enable: Boolean) {
        TODO("not implemented")
    }

    override fun setCursorName(name: String?) {
        TODO("not implemented")
    }

    override fun execute(sql: String?): Boolean {
        TODO("not implemented")
    }

    override fun execute(sql: String?, autoGeneratedKeys: Int): Boolean {
        TODO("not implemented")
    }

    override fun execute(sql: String?, columnIndexes: IntArray?): Boolean {
        TODO("not implemented")
    }

    override fun execute(sql: String?, columnNames: Array<out String>?): Boolean {
        TODO("not implemented")
    }

    override fun setPoolable(poolable: Boolean) {
        TODO("not implemented")
    }

    override fun executeBatch(): IntArray {
        TODO("not implemented")
    }

    override fun getQueryTimeout(): Int {
        TODO("not implemented")
    }

    override fun setFetchSize(rows: Int) {
        TODO("not implemented")
    }

    override fun clearWarnings() {
        TODO("not implemented")
    }

    override fun isPoolable(): Boolean {
        TODO("not implemented")
    }

    override fun addBatch(sql: String?) {
        TODO("not implemented")
    }

    override fun getGeneratedKeys(): ResultSet {
        TODO("not implemented")
    }

    final override fun getResultSetConcurrency(): Int = recordRes(resultSetConcurrency)

    override fun getResultSet(): ResultSet {
        TODO("not implemented")
    }

    override fun setQueryTimeout(seconds: Int) {
        TODO("not implemented")
    }

    override fun closeOnCompletion() {
        TODO("not implemented")
    }

    override fun executeUpdate(sql: String?): Int {
        TODO("not implemented")
    }

    override fun executeUpdate(sql: String?, autoGeneratedKeys: Int): Int {
        TODO("not implemented")
    }

    override fun executeUpdate(sql: String?, columnIndexes: IntArray?): Int {
        TODO("not implemented")
    }

    override fun executeUpdate(sql: String?, columnNames: Array<out String>?): Int {
        TODO("not implemented")
    }

    override fun getFetchDirection(): Int {
        TODO("not implemented")
    }

    override fun getResultSetHoldability(): Int {
        TODO("not implemented")
    }

    override fun getMoreResults(): Boolean {
        TODO("not implemented")
    }

    override fun getMoreResults(current: Int): Boolean {
        TODO("not implemented")
    }
}